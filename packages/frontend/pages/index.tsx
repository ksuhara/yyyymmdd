import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { Box, Button, Heading, Input, Link, Text } from "@chakra-ui/react";
import contract from "../constants/contract.json";
import { ethers } from "ethers";
import React from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

const contractAddress = "0x0dca239715F64b42a5305e236F4380424036893a";
const abi = contract.abi;

declare global {
  interface Window {
    ethereum: any;
  }
}

const Home: NextPage = () => {
  const [txHash, setTxHash] = React.useState("");
  const [mintingStatus, setMintingStatus] = React.useState("ended");
  const [startDate, setStartDate] = React.useState(new Date() as any);
  const [currentAccount, setCurrentAccount] = React.useState(null);

  const connectWalletHandler = async () => {
    const { ethereum } = window;

    if (!ethereum) {
      alert("Please install Metamask!");
      window.open("https://metamask.app.link/dapp/https://pixel-onchained.vercel.app/");
    }

    try {
      const accounts = await ethereum.request({
        method: "eth_requestAccounts",
      });
      console.log("Found an account! Address: ", accounts[0]);
      setCurrentAccount(accounts[0]);
    } catch (err) {
      console.log(err);
    }
  };

  const mintNftHandler = async () => {
    try {
      const { ethereum } = window;

      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum);
        const signer = provider.getSigner();
        const nftContract = new ethers.Contract(contractAddress, abi, signer);
        const address = signer.getAddress();

        const date1 = new Date("1970/01/01") as any;
        const diffTime = Math.abs(startDate - date1);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        let nftTxn = await nftContract.mint(diffDays);

        console.log("Mining... please wait");
        setMintingStatus("started");
        setTxHash(nftTxn.hash);
        await nftTxn.wait();
        setMintingStatus("ended");

        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);
      } else {
        console.log("Ethereum object does not exist");
      }
    } catch (err) {
      console.log(err);
    }
  };

  const checkWalletIsConnected = async () => {
    const { ethereum } = window;

    if (!ethereum) {
      console.log("Make sure you have Metamask installed!");
      return;
    } else {
      console.log("Wallet exists! We're ready to go!");
    }

    const accounts = await ethereum.request({ method: "eth_accounts" });

    if (accounts.length !== 0) {
      const account = accounts[0];
      console.log("Found an authorized account: ", account);
      setCurrentAccount(account);
    } else {
      console.log("No authorized account found");
    }
  };

  React.useEffect(() => {
    checkWalletIsConnected();
    const data = [
      {
        chainId: "0x4",
        chainName: "Rinkeby",
        nativeCurrency: {
          name: "ETH",
          symbol: "ETH",
          decimals: 18,
        },
        rpcUrls: ["https://rinkeby.infura.io/v3/95f65ab099894076814e8526f52c9149"],
        blockExplorerUrls: ["https://rinkeby.etherscan.io/"],
      },
    ];
    if (window.ethereum) {
      window.ethereum.request({
        method: "wallet_addEthereumChain",
        params: data,
      });
    }
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>YYYYMMDD</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Heading my="4">Mint Page</Heading>
      <DatePicker
        dateFormat="yyyy/MM/dd"
        minDate={new Date("1970/01/01")}
        maxDate={new Date()}
        selected={startDate}
        showMonthDropdown
        scrollableYearDropdown
        showYearDropdown
        onChange={(date) => setStartDate(date)}
        inline
      />
      {currentAccount ? (
        <Button my="4" size="md" colorScheme="blue" fontWeight="bold" onClick={mintNftHandler}>
          Mint YYYYMMDD
        </Button>
      ) : (
        <Button my="4" size="md" colorScheme="blue" fontWeight="bold" onClick={connectWalletHandler}>
          ConnectWallet
        </Button>
      )}
      {txHash ? (
        <Text>
          see transaction:{" "}
          <Link
            href={`https://rinkeby.etherscan.io/tx/${txHash}`}
            isExternal
          >{`https://rinkeby.etherscan.io/tx/${txHash}`}</Link>
        </Text>
      ) : (
        <></>
      )}
      <Box my="4">
        <Link href="/chronology" color="blue.400">
          chronology
        </Link>
      </Box>
    </div>
  );
};

export default Home;
